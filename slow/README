--------------------------------------------------------------------------------
OVERVIEW

This directory contains the literal translation of the given problem on how to
count how many rounds it would take to get a deck of cards back to its original
configuration using the following rules:

      1. Take the top card off the deck and set it on the table, face down.
      2. Take the next card off the top and put it on the bottom of the deck in your hand.
      3. Continue steps 1 and 2 until all cards are on the table. This is a round.
      4. Pick up the deck from the table and repeat steps 1-3 until the deck is in the original order.

This solution is written in Java and consists of two classes. The first class
is in "Deck.java" and is used to represent the deck of cards in an abstract
manner. Each card is assumed to be unique and is represented by an integer from
0 to n-1 (where n is the number of cards in the deck). This class allows you to
move cards from the front and back of the deck.

The second class is in "RoundCounter.java" and it contains the main entry point,
command line processing, and a literal implementation of the problem statement
using the Deck class. Note the use of a stack to represent the table.

This "RoundCounter" can solve problems where the number of rounds is not large.
For a deck of 13 cards it returns an answer of 12. For a deck of 42 cards it
returns 42. For a deck of 313 cards it does not return in a reasonable amount
of time.

--------------------------------------------------------------------------------
BUILD

To build the RoundCounter, you need to have Java installed. Run the "make"
command to generate the class files.

--------------------------------------------------------------------------------
EXECUTION

At the command prompt, type "./round_counter <cards>", where cards represents
an integer value for the size of the deck of cards.

-Bernhard H. Damberger

